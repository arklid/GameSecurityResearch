/// <summary>
/// Copyright (c) 2016 Fredric Baeckström Arklid
/// All rights reserved.
/// 
/// THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
/// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
/// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
/// 
/// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
/// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/// 
/// 0101010001101000011001010111001001100101001000000110100101110011001000000110111001101111001000000111001101110000011011110110111101101110
/// </summary>
namespace GameSecurityResearch.Hash.Custom
{
    public static class EAGamesChecksum
    {
        private static byte[] EACRCTable = new byte[1024] {
            0x00, 0x00, 0x00, 0x00, 0x04, 0xC1, 0x1D, 0xB7, 0x09, 0x82, 0x3B, 0x6E,
            0x0D, 0x43, 0x26, 0xD9, 0x13, 0x04, 0x76, 0xDC, 0x17, 0xC5, 0x6B, 0x6B,
            0x1A, 0x86, 0x4D, 0xB2, 0x1E, 0x47, 0x50, 0x05, 0x26, 0x08, 0xED, 0xB8,
            0x22, 0xC9, 0xF0, 0x0F, 0x2F, 0x8A, 0xD6, 0xD6, 0x2B, 0x4B, 0xCB, 0x61,
            0x35, 0x0C, 0x9B, 0x64, 0x31, 0xCD, 0x86, 0xD3, 0x3C, 0x8E, 0xA0, 0x0A,
            0x38, 0x4F, 0xBD, 0xBD, 0x4C, 0x11, 0xDB, 0x70, 0x48, 0xD0, 0xC6, 0xC7,
            0x45, 0x93, 0xE0, 0x1E, 0x41, 0x52, 0xFD, 0xA9, 0x5F, 0x15, 0xAD, 0xAC,
            0x5B, 0xD4, 0xB0, 0x1B, 0x56, 0x97, 0x96, 0xC2, 0x52, 0x56, 0x8B, 0x75,
            0x6A, 0x19, 0x36, 0xC8, 0x6E, 0xD8, 0x2B, 0x7F, 0x63, 0x9B, 0x0D, 0xA6,
            0x67, 0x5A, 0x10, 0x11, 0x79, 0x1D, 0x40, 0x14, 0x7D, 0xDC, 0x5D, 0xA3,
            0x70, 0x9F, 0x7B, 0x7A, 0x74, 0x5E, 0x66, 0xCD, 0x98, 0x23, 0xB6, 0xE0,
            0x9C, 0xE2, 0xAB, 0x57, 0x91, 0xA1, 0x8D, 0x8E, 0x95, 0x60, 0x90, 0x39,
            0x8B, 0x27, 0xC0, 0x3C, 0x8F, 0xE6, 0xDD, 0x8B, 0x82, 0xA5, 0xFB, 0x52,
            0x86, 0x64, 0xE6, 0xE5, 0xBE, 0x2B, 0x5B, 0x58, 0xBA, 0xEA, 0x46, 0xEF,
            0xB7, 0xA9, 0x60, 0x36, 0xB3, 0x68, 0x7D, 0x81, 0xAD, 0x2F, 0x2D, 0x84,
            0xA9, 0xEE, 0x30, 0x33, 0xA4, 0xAD, 0x16, 0xEA, 0xA0, 0x6C, 0x0B, 0x5D,
            0xD4, 0x32, 0x6D, 0x90, 0xD0, 0xF3, 0x70, 0x27, 0xDD, 0xB0, 0x56, 0xFE,
            0xD9, 0x71, 0x4B, 0x49, 0xC7, 0x36, 0x1B, 0x4C, 0xC3, 0xF7, 0x06, 0xFB,
            0xCE, 0xB4, 0x20, 0x22, 0xCA, 0x75, 0x3D, 0x95, 0xF2, 0x3A, 0x80, 0x28,
            0xF6, 0xFB, 0x9D, 0x9F, 0xFB, 0xB8, 0xBB, 0x46, 0xFF, 0x79, 0xA6, 0xF1,
            0xE1, 0x3E, 0xF6, 0xF4, 0xE5, 0xFF, 0xEB, 0x43, 0xE8, 0xBC, 0xCD, 0x9A,
            0xEC, 0x7D, 0xD0, 0x2D, 0x34, 0x86, 0x70, 0x77, 0x30, 0x47, 0x6D, 0xC0,
            0x3D, 0x04, 0x4B, 0x19, 0x39, 0xC5, 0x56, 0xAE, 0x27, 0x82, 0x06, 0xAB,
            0x23, 0x43, 0x1B, 0x1C, 0x2E, 0x00, 0x3D, 0xC5, 0x2A, 0xC1, 0x20, 0x72,
            0x12, 0x8E, 0x9D, 0xCF, 0x16, 0x4F, 0x80, 0x78, 0x1B, 0x0C, 0xA6, 0xA1,
            0x1F, 0xCD, 0xBB, 0x16, 0x01, 0x8A, 0xEB, 0x13, 0x05, 0x4B, 0xF6, 0xA4,
            0x08, 0x08, 0xD0, 0x7D, 0x0C, 0xC9, 0xCD, 0xCA, 0x78, 0x97, 0xAB, 0x07,
            0x7C, 0x56, 0xB6, 0xB0, 0x71, 0x15, 0x90, 0x69, 0x75, 0xD4, 0x8D, 0xDE,
            0x6B, 0x93, 0xDD, 0xDB, 0x6F, 0x52, 0xC0, 0x6C, 0x62, 0x11, 0xE6, 0xB5,
            0x66, 0xD0, 0xFB, 0x02, 0x5E, 0x9F, 0x46, 0xBF, 0x5A, 0x5E, 0x5B, 0x08,
            0x57, 0x1D, 0x7D, 0xD1, 0x53, 0xDC, 0x60, 0x66, 0x4D, 0x9B, 0x30, 0x63,
            0x49, 0x5A, 0x2D, 0xD4, 0x44, 0x19, 0x0B, 0x0D, 0x40, 0xD8, 0x16, 0xBA,
            0xAC, 0xA5, 0xC6, 0x97, 0xA8, 0x64, 0xDB, 0x20, 0xA5, 0x27, 0xFD, 0xF9,
            0xA1, 0xE6, 0xE0, 0x4E, 0xBF, 0xA1, 0xB0, 0x4B, 0xBB, 0x60, 0xAD, 0xFC,
            0xB6, 0x23, 0x8B, 0x25, 0xB2, 0xE2, 0x96, 0x92, 0x8A, 0xAD, 0x2B, 0x2F,
            0x8E, 0x6C, 0x36, 0x98, 0x83, 0x2F, 0x10, 0x41, 0x87, 0xEE, 0x0D, 0xF6,
            0x99, 0xA9, 0x5D, 0xF3, 0x9D, 0x68, 0x40, 0x44, 0x90, 0x2B, 0x66, 0x9D,
            0x94, 0xEA, 0x7B, 0x2A, 0xE0, 0xB4, 0x1D, 0xE7, 0xE4, 0x75, 0x00, 0x50,
            0xE9, 0x36, 0x26, 0x89, 0xED, 0xF7, 0x3B, 0x3E, 0xF3, 0xB0, 0x6B, 0x3B,
            0xF7, 0x71, 0x76, 0x8C, 0xFA, 0x32, 0x50, 0x55, 0xFE, 0xF3, 0x4D, 0xE2,
            0xC6, 0xBC, 0xF0, 0x5F, 0xC2, 0x7D, 0xED, 0xE8, 0xCF, 0x3E, 0xCB, 0x31,
            0xCB, 0xFF, 0xD6, 0x86, 0xD5, 0xB8, 0x86, 0x83, 0xD1, 0x79, 0x9B, 0x34,
            0xDC, 0x3A, 0xBD, 0xED, 0xD8, 0xFB, 0xA0, 0x5A, 0x69, 0x0C, 0xE0, 0xEE,
            0x6D, 0xCD, 0xFD, 0x59, 0x60, 0x8E, 0xDB, 0x80, 0x64, 0x4F, 0xC6, 0x37,
            0x7A, 0x08, 0x96, 0x32, 0x7E, 0xC9, 0x8B, 0x85, 0x73, 0x8A, 0xAD, 0x5C,
            0x77, 0x4B, 0xB0, 0xEB, 0x4F, 0x04, 0x0D, 0x56, 0x4B, 0xC5, 0x10, 0xE1,
            0x46, 0x86, 0x36, 0x38, 0x42, 0x47, 0x2B, 0x8F, 0x5C, 0x00, 0x7B, 0x8A,
            0x58, 0xC1, 0x66, 0x3D, 0x55, 0x82, 0x40, 0xE4, 0x51, 0x43, 0x5D, 0x53,
            0x25, 0x1D, 0x3B, 0x9E, 0x21, 0xDC, 0x26, 0x29, 0x2C, 0x9F, 0x00, 0xF0,
            0x28, 0x5E, 0x1D, 0x47, 0x36, 0x19, 0x4D, 0x42, 0x32, 0xD8, 0x50, 0xF5,
            0x3F, 0x9B, 0x76, 0x2C, 0x3B, 0x5A, 0x6B, 0x9B, 0x03, 0x15, 0xD6, 0x26,
            0x07, 0xD4, 0xCB, 0x91, 0x0A, 0x97, 0xED, 0x48, 0x0E, 0x56, 0xF0, 0xFF,
            0x10, 0x11, 0xA0, 0xFA, 0x14, 0xD0, 0xBD, 0x4D, 0x19, 0x93, 0x9B, 0x94,
            0x1D, 0x52, 0x86, 0x23, 0xF1, 0x2F, 0x56, 0x0E, 0xF5, 0xEE, 0x4B, 0xB9,
            0xF8, 0xAD, 0x6D, 0x60, 0xFC, 0x6C, 0x70, 0xD7, 0xE2, 0x2B, 0x20, 0xD2,
            0xE6, 0xEA, 0x3D, 0x65, 0xEB, 0xA9, 0x1B, 0xBC, 0xEF, 0x68, 0x06, 0x0B,
            0xD7, 0x27, 0xBB, 0xB6, 0xD3, 0xE6, 0xA6, 0x01, 0xDE, 0xA5, 0x80, 0xD8,
            0xDA, 0x64, 0x9D, 0x6F, 0xC4, 0x23, 0xCD, 0x6A, 0xC0, 0xE2, 0xD0, 0xDD,
            0xCD, 0xA1, 0xF6, 0x04, 0xC9, 0x60, 0xEB, 0xB3, 0xBD, 0x3E, 0x8D, 0x7E,
            0xB9, 0xFF, 0x90, 0xC9, 0xB4, 0xBC, 0xB6, 0x10, 0xB0, 0x7D, 0xAB, 0xA7,
            0xAE, 0x3A, 0xFB, 0xA2, 0xAA, 0xFB, 0xE6, 0x15, 0xA7, 0xB8, 0xC0, 0xCC,
            0xA3, 0x79, 0xDD, 0x7B, 0x9B, 0x36, 0x60, 0xC6, 0x9F, 0xF7, 0x7D, 0x71,
            0x92, 0xB4, 0x5B, 0xA8, 0x96, 0x75, 0x46, 0x1F, 0x88, 0x32, 0x16, 0x1A,
            0x8C, 0xF3, 0x0B, 0xAD, 0x81, 0xB0, 0x2D, 0x74, 0x85, 0x71, 0x30, 0xC3,
            0x5D, 0x8A, 0x90, 0x99, 0x59, 0x4B, 0x8D, 0x2E, 0x54, 0x08, 0xAB, 0xF7,
            0x50, 0xC9, 0xB6, 0x40, 0x4E, 0x8E, 0xE6, 0x45, 0x4A, 0x4F, 0xFB, 0xF2,
            0x47, 0x0C, 0xDD, 0x2B, 0x43, 0xCD, 0xC0, 0x9C, 0x7B, 0x82, 0x7D, 0x21,
            0x7F, 0x43, 0x60, 0x96, 0x72, 0x00, 0x46, 0x4F, 0x76, 0xC1, 0x5B, 0xF8,
            0x68, 0x86, 0x0B, 0xFD, 0x6C, 0x47, 0x16, 0x4A, 0x61, 0x04, 0x30, 0x93,
            0x65, 0xC5, 0x2D, 0x24, 0x11, 0x9B, 0x4B, 0xE9, 0x15, 0x5A, 0x56, 0x5E,
            0x18, 0x19, 0x70, 0x87, 0x1C, 0xD8, 0x6D, 0x30, 0x02, 0x9F, 0x3D, 0x35,
            0x06, 0x5E, 0x20, 0x82, 0x0B, 0x1D, 0x06, 0x5B, 0x0F, 0xDC, 0x1B, 0xEC,
            0x37, 0x93, 0xA6, 0x51, 0x33, 0x52, 0xBB, 0xE6, 0x3E, 0x11, 0x9D, 0x3F,
            0x3A, 0xD0, 0x80, 0x88, 0x24, 0x97, 0xD0, 0x8D, 0x20, 0x56, 0xCD, 0x3A,
            0x2D, 0x15, 0xEB, 0xE3, 0x29, 0xD4, 0xF6, 0x54, 0xC5, 0xA9, 0x26, 0x79,
            0xC1, 0x68, 0x3B, 0xCE, 0xCC, 0x2B, 0x1D, 0x17, 0xC8, 0xEA, 0x00, 0xA0,
            0xD6, 0xAD, 0x50, 0xA5, 0xD2, 0x6C, 0x4D, 0x12, 0xDF, 0x2F, 0x6B, 0xCB,
            0xDB, 0xEE, 0x76, 0x7C, 0xE3, 0xA1, 0xCB, 0xC1, 0xE7, 0x60, 0xD6, 0x76,
            0xEA, 0x23, 0xF0, 0xAF, 0xEE, 0xE2, 0xED, 0x18, 0xF0, 0xA5, 0xBD, 0x1D,
            0xF4, 0x64, 0xA0, 0xAA, 0xF9, 0x27, 0x86, 0x73, 0xFD, 0xE6, 0x9B, 0xC4,
            0x89, 0xB8, 0xFD, 0x09, 0x8D, 0x79, 0xE0, 0xBE, 0x80, 0x3A, 0xC6, 0x67,
            0x84, 0xFB, 0xDB, 0xD0, 0x9A, 0xBC, 0x8B, 0xD5, 0x9E, 0x7D, 0x96, 0x62,
            0x93, 0x3E, 0xB0, 0xBB, 0x97, 0xFF, 0xAD, 0x0C, 0xAF, 0xB0, 0x10, 0xB1,
            0xAB, 0x71, 0x0D, 0x06, 0xA6, 0x32, 0x2B, 0xDF, 0xA2, 0xF3, 0x36, 0x68,
            0xBC, 0xB4, 0x66, 0x6D, 0xB8, 0x75, 0x7B, 0xDA, 0xB5, 0x36, 0x5D, 0x03,
             0xB1, 0xF7, 0x40, 0xB4
        };

        private static uint Mask(int mb, int me)
        {
            uint begin = 0xFFFFFFFF >> mb;
            uint end = me < 31 ? (0xFFFFFFFF >> (me + 1)) : 0;
            uint mask = begin ^ end;

            if (me < mb)
            {
                return ~mask;
            }
            else
            {
                return mask;
            }
        }

        private static uint BitSwap32(uint x)
        {
            return ((x << 24) & 0xff000000) |
                    ((x << 8) & 0x00ff0000) |
                    ((x >> 8) & 0x0000ff00) |
                    ((x >> 24) & 0x000000ff);
        }

        public static uint RotateLeft(this uint value, int count)
        {
            return (value << count) | (value >> (32 - count));
        }

        public static uint RotateRight(this uint value, int count)
        {
            return (value >> count) | (value << (32 - count));
        }

        /// <summary>
        /// Calculates a signature for Electronic Arts custom checksum
        /// </summary>
        /// <param name="buffer">Buffer</param>
        /// <param name="length">Size</param>
        /// <returns>Signature</returns>
        public static uint Calculate(byte[] buffer, uint length)
        {
            uint rotnored = RotateRight(buffer[0], 8) | RotateRight(buffer[1], 16);
            uint nrotor = rotnored | RotateLeft(buffer[2], 8);
            uint final = ~(nrotor | buffer[3]);

            for (uint count = 4; count < length; count++)
            {
                uint rotnm = RotateLeft(final, 10) & Mask(22, 29);
                final <<= 8;
                final |= buffer[count];
                rotnm = BitSwap32(EACRCTable[rotnm]);
                final ^= rotnm;
            }

            return ~final;
        }
    }
}
